name: Deploy to Azure Container Apps (azdavikaka-22)

on:
  workflow_dispatch:
    inputs:
      image_repo:
        description: 'Repositorio en ACR (p.ej. demo/nginx o azdavikaka-22)'
        required: true
        default: 'demo/nginx'
      image_tag:
        description: 'Tag en ACR (debe existir en tu ACR privado)'
        required: true
        default: '1.27-alpine'

permissions:
  id-token: write
  contents: read

env:
  RG: az-jrc-test
  ACA_APP: azdavikaka-22
  ACR_NAME: acrforpremium
  ACR_LOGIN_SERVER: acrforpremium-a5hpfxbyemgcbsa8.azurecr.io
  TARGET_PORT: 80

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZDAVIKAKA22_AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZDAVIKAKA22_AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZDAVIKAKA22_AZURE_SUBSCRIPTION_ID }}

      # Vincula el ACR al Container App con identidad del sistema (idempotente)
      - name: Link ACR to Container App (managed identity)
        shell: bash
        run: |
          set -e
          az containerapp registry set \
            -g "${{ env.RG }}" -n "${{ env.ACA_APP }}" \
            --server "${{ env.ACR_LOGIN_SERVER }}" \
            --identity system \
            --no-wait || true

      # Espera a que NO haya operación activa y que el registry ya esté vinculado
      - name: Wait until Container App is Ready (no active operations)
        shell: bash
        run: |
          set -e
          RG="${{ env.RG }}"
          APP="${{ env.ACA_APP }}"
          ACR="${{ env.ACR_LOGIN_SERVER }}"
          echo "Esperando a que NO haya operación activa y el registry esté vinculado…"
          for i in {1..40}; do
            state=$(az containerapp show -g "$RG" -n "$APP" --query "properties.provisioningState" -o tsv 2>/dev/null || echo "Unknown")
            reg=$(az containerapp show -g "$RG" -n "$APP" --query "properties.configuration.registries[?server=='$ACR'] | length(@)" -o tsv 2>/dev/null || echo 0)
            echo "Intento $i/40 -> state=$state, registryLinked=$reg"
            # Avanza cuando NO hay operación en curso: Succeeded / Failed / Canceled
            if [ "$reg" = "1" ] && { [ "$state" = "Succeeded" ] || [ "$state" = "Failed" ] || [ "$state" = "Canceled" ]; }; then
              echo "OK: no hay operación activa y el registry está vinculado."
              break
            fi
            sleep 15
          done

      # Despliegue (pull lo hace ACA con su identidad y su conectividad privada)
      - name: Deploy to Azure Container Apps
        uses: azure/container-apps-deploy-action@v2
        with:
          resourceGroup: ${{ env.RG }}
          containerAppName: ${{ env.ACA_APP }}
          imageToDeploy: ${{ env.ACR_LOGIN_SERVER }}/${{ github.event.inputs.image_repo }}:${{ github.event.inputs.image_tag }}
          registryUrl: ${{ env.ACR_LOGIN_SERVER }}
          ingress: external
          targetPort: ${{ env.TARGET_PORT }}

      # Evitar cold start (opcional)
      - name: Ensure min replicas = 1
        shell: bash
        run: |
          az containerapp update \
            -g "${{ env.RG }}" -n "${{ env.ACA_APP }}" \
            --min-replicas 1

      # Mostrar FQDN
      - name: Show app FQDN
        shell: bash
        run: |
          FQDN=$(az containerapp show -g "${{ env.RG }}" -n "${{ env.ACA_APP }}" --query "properties.configuration.ingress.fqdn" -o tsv)
          echo "FQDN: https://$FQDN"


